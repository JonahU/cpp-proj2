
-implemented tokenizer (visitor patter) before duck typing lecture, implemented parser (variant + visit) after duck typing lecture
-multiple variants for lookup in parser: https://www.bfilipek.com/2018/09/visit-variants.html
-no nested structs
-no nested templates (started implementing but decided to prioritize other things)

-half baked multi dispatch
-1 pass parser (no backtracking)

-stack for nodes under construction not ideal given current abstractions
-e.g. parsing a function:

      [STACK TOP]
    <variable-node> // the 2nd parameter              
    <variable-node> // the 1st parameter
    <function-node> 
    <variable-node> // the return value (parser must assume this a global variable, doesn't know it's a type until it sees left paren)
       [BOTTOM]

    -We so far have processed int func(char one, long two)
    -Next symbol could be either ';' or '{'
    -I want to mark the function-node as either having a definition or not
    -Because I used a stack I can't directly access the function-node

    -Getting the desired results means creating a special pop_node_function
    -I should have thought more carefully about these issues...

-biggest source of bugs in the parser
-hardest to reason about, tracking lexer token, scope + ast node in a not very coherant way
-if i was designing from scratch would use std::visit and multi dispatch everywhere
-there isn't much error handling in the parser, would like to add better error messages with more time
-tried to implement a "event"-based style in the parser which sort of works but probably isn't worth its cost given the current implementation
-the basic idea is:
    -set current lexer token to current_token
    -std::visit(current_ast_node, current_token) is called everytime the parser processes a new token
    -this model is nice because I never explicitly construct an ast node then check if for the "const" keyword
    -I just construct a new node and std::visit is called on every new token
    -the idea was it would be better to split up all the complicated logic when constructing ast nodes
    -although a nice idea, there is marginal utility given the current implementation (some issues relate to the stack problem above)
    -it's useful for variable modifiers but that's about it...

-would be nice to go all out on multiple dispatch in the parser + encorporate current_scope which would simplify the code in parser_token_visitor

-better error msgs in parser
-at the moment you can get a bad variant access, segmentation fault (reading the top element of an empty std::stack) or if you're lucky a runtime exception with a slightly more useful error message

-the use of the term "ast" in the parser might be a bit misleading
-the parser produces a vector of ast_nodes but those nodes can have branches
-it is an ast of sorts but probably not in the traditional sense...

RULES:
    SUPPORTED:
        - (inline) variables
        - aggregate (is this POD?)
        - supported keywords: int, double, std::vector etc...
        - supported modifiers *, &, const, unsigned
    NOT ALLOWED:
        - no const struct members
        - no pointer-to-pointer
        - no r-value references
        - no namespaces
        - no comments
        - no function overloading (there isn't overloading in python)
        - no nested template
        - no nested struct
        - newline required at end of header file or weird things happen
        - no extraneous parentheses
        - no operator functions
        - no tuple
        - no forward declarations
        - only 1 function declaration/definition
        - should be valid c++, some things may not get caught by the lexer/parser doesn't mean the generated code will work...
    BUGS:
        - name mangling in cpptopy isn't perfect:
        - don't name your struct "string" or end it with unsigned e.g. "mytype_unsigned"
        - no curly braces within string literals or comments in a function definition
        - put const on the right, lhs const specifically for containers is broken (see const_container.h example)